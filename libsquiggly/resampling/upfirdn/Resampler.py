# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Resampler', [dirname(__file__)])
        except ImportError:
            import _Resampler
            return _Resampler
        if fp is not None:
            try:
                _mod = imp.load_module('_Resampler', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Resampler = swig_import_helper()
    del swig_import_helper
else:
    import _Resampler
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Resampler.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _Resampler.SwigPyIterator_value(self)
    def incr(self, n=1): return _Resampler.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _Resampler.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _Resampler.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _Resampler.SwigPyIterator_equal(self, *args)
    def copy(self): return _Resampler.SwigPyIterator_copy(self)
    def next(self): return _Resampler.SwigPyIterator_next(self)
    def __next__(self): return _Resampler.SwigPyIterator___next__(self)
    def previous(self): return _Resampler.SwigPyIterator_previous(self)
    def advance(self, *args): return _Resampler.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _Resampler.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _Resampler.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _Resampler.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _Resampler.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _Resampler.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _Resampler.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _Resampler.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ResamplerRR(_object):
    """Proxy of C++ Resampler<(double,double,double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResamplerRR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResamplerRR, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Resampler<(double,double,double)> self, int upRate, int downRate, double * coefs) -> ResamplerRR"""
        this = _Resampler.new_ResamplerRR(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Resampler.delete_ResamplerRR
    __del__ = lambda self : None;
    def apply(self, *args):
        """apply(ResamplerRR self, double * _in, double * out) -> int"""
        return _Resampler.ResamplerRR_apply(self, *args)

    def neededOutCount(self, *args):
        """neededOutCount(ResamplerRR self, int inCount) -> int"""
        return _Resampler.ResamplerRR_neededOutCount(self, *args)

    def coefsPerPhase(self):
        """coefsPerPhase(ResamplerRR self) -> int"""
        return _Resampler.ResamplerRR_coefsPerPhase(self)

ResamplerRR_swigregister = _Resampler.ResamplerRR_swigregister
ResamplerRR_swigregister(ResamplerRR)

class ResamplerRC(_object):
    """Proxy of C++ Resampler<(double,complex<(double)>,complex<(double)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResamplerRC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResamplerRC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Resampler<(double,complex<(double)>,complex<(double)>)> self, int upRate, int downRate, complex< double > * coefs) -> ResamplerRC"""
        this = _Resampler.new_ResamplerRC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Resampler.delete_ResamplerRC
    __del__ = lambda self : None;
    def apply(self, *args):
        """apply(ResamplerRC self, double * _in, complex< double > * out) -> int"""
        return _Resampler.ResamplerRC_apply(self, *args)

    def neededOutCount(self, *args):
        """neededOutCount(ResamplerRC self, int inCount) -> int"""
        return _Resampler.ResamplerRC_neededOutCount(self, *args)

    def coefsPerPhase(self):
        """coefsPerPhase(ResamplerRC self) -> int"""
        return _Resampler.ResamplerRC_coefsPerPhase(self)

ResamplerRC_swigregister = _Resampler.ResamplerRC_swigregister
ResamplerRC_swigregister(ResamplerRC)

class ResamplerCR(_object):
    """Proxy of C++ Resampler<(complex<(double)>,complex<(double)>,double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResamplerCR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResamplerCR, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Resampler<(complex<(double)>,complex<(double)>,double)> self, int upRate, int downRate, double * coefs) -> ResamplerCR"""
        this = _Resampler.new_ResamplerCR(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Resampler.delete_ResamplerCR
    __del__ = lambda self : None;
    def apply(self, *args):
        """apply(ResamplerCR self, complex< double > * _in, complex< double > * out) -> int"""
        return _Resampler.ResamplerCR_apply(self, *args)

    def neededOutCount(self, *args):
        """neededOutCount(ResamplerCR self, int inCount) -> int"""
        return _Resampler.ResamplerCR_neededOutCount(self, *args)

    def coefsPerPhase(self):
        """coefsPerPhase(ResamplerCR self) -> int"""
        return _Resampler.ResamplerCR_coefsPerPhase(self)

ResamplerCR_swigregister = _Resampler.ResamplerCR_swigregister
ResamplerCR_swigregister(ResamplerCR)

class ResamplerCC(_object):
    """Proxy of C++ Resampler<(complex<(double)>,complex<(double)>,complex<(double)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResamplerCC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResamplerCC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Resampler<(complex<(double)>,complex<(double)>,complex<(double)>)> self, int upRate, int downRate, complex< double > * coefs) -> ResamplerCC"""
        this = _Resampler.new_ResamplerCC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Resampler.delete_ResamplerCC
    __del__ = lambda self : None;
    def apply(self, *args):
        """apply(ResamplerCC self, complex< double > * _in, complex< double > * out) -> int"""
        return _Resampler.ResamplerCC_apply(self, *args)

    def neededOutCount(self, *args):
        """neededOutCount(ResamplerCC self, int inCount) -> int"""
        return _Resampler.ResamplerCC_neededOutCount(self, *args)

    def coefsPerPhase(self):
        """coefsPerPhase(ResamplerCC self) -> int"""
        return _Resampler.ResamplerCC_coefsPerPhase(self)

ResamplerCC_swigregister = _Resampler.ResamplerCC_swigregister
ResamplerCC_swigregister(ResamplerCC)

# This file is compatible with both classic and new-style classes.


